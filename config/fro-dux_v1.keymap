#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1100
#define ZMK_POINTING_DEFAULT_SCRL_VAL 40
#include <dt-bindings/zmk/pointing.h> // include mouse emulation
&mmv {
    x-input-code = <INPUT_REL_X>;
    y-input-code = <INPUT_REL_Y>;
    time-to-max-speed-ms = <400>;
    acceleration-exponent = <1>;
};

#include <behaviors/num_word.dtsi> // requires auto-layer module in west.yml

#include "zmk-helpers/helper.h" // requires helper module in west.yml

/* Define layer names */

#define DEF 0
#define NAV 1
#define FN 2
#define NUM 3
#define UML 4
#define MM 5

/* Global settings */

#define QUICK_TAP_MS 170

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.9s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

/* Homerow mods */

#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24  // left hand
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29  // right hand
#define THUMBS 30 31 32 33 34 35                        // thumb keys

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <270>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <130>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

// HRM combo hack - workaround for lack of tap-only combos (ZMK issue #544)
#define ZMK_COMBO_8(NAME, TAP, KEYPOS, LAYERS, COMBO_TERM, COMBO_IDLE, HOLD, SIDE) \
    MAKE_HRM(hm_combo_ ## NAME, &kp, TAP, SIDE THUMBS) \
    ZMK_COMBO_6(NAME, &hm_combo_ ## NAME HOLD 0, KEYPOS, LAYERS, COMBO_TERM, COMBO_IDLE)

/* Combos and leader key sequences */

#include "combos.dtsi"  // must be sourced after HRM-combo hack

/* Num-word */

// tap: num-word | double-tap: sticky num-layer | hold: num-layer
#define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(smart_num,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&num_dance>;
)
ZMK_TAP_DANCE(num_dance,
    tapping-term-ms = <200>;
    bindings = <&num_word NUM>, <&sl NUM>;  // reverse this for sticky-num on single tap
)

/* Additional behaviors */

// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_MOD_MORPH(NAME, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

/* - used on keymap - */

// tap: comma | shift + tap: !
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &kp EXCLAMATION)

// tap: dot | shift + tap: ?
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &kp QUESTION)

// tap: slash | shift + tap: slash
SIMPLE_MORPH(slash_morph, SFT, &kp SLASH, &kp SLASH)

/ { macros { u_macro_u_bt_sel_0: u_macro_u_bt_sel_0 { compatible = "zmk,behavior-macro"; #binding-cells = <0>; wait-ms = <0>; bindings = <&bt BT_SEL 0 &bt BT_CLR>; }; }; }; / { behaviors { u_bt_sel_0: u_bt_sel_0 { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&bt BT_SEL 0>, <&u_macro_u_bt_sel_0>; mods = <(MOD_LSFT|MOD_RSFT)>; }; }; };
/ { macros { u_macro_u_bt_sel_1: u_macro_u_bt_sel_1 { compatible = "zmk,behavior-macro"; #binding-cells = <0>; wait-ms = <0>; bindings = <&bt BT_SEL 1 &bt BT_CLR>; }; }; }; / { behaviors { u_bt_sel_1: u_bt_sel_1 { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&bt BT_SEL 1>, <&u_macro_u_bt_sel_1>; mods = <(MOD_LSFT|MOD_RSFT)>; }; }; };
/ { macros { u_macro_u_bt_sel_2: u_macro_u_bt_sel_2 { compatible = "zmk,behavior-macro"; #binding-cells = <0>; wait-ms = <0>; bindings = <&bt BT_SEL 2 &bt BT_CLR>; }; }; }; / { behaviors { u_bt_sel_2: u_bt_sel_2 { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&bt BT_SEL 2>, <&u_macro_u_bt_sel_2>; mods = <(MOD_LSFT|MOD_RSFT)>; }; }; };
/ { macros { u_macro_u_bt_sel_3: u_macro_u_bt_sel_3 { compatible = "zmk,behavior-macro"; #binding-cells = <0>; wait-ms = <0>; bindings = <&bt BT_SEL 3 &bt BT_CLR>; }; }; }; / { behaviors { u_bt_sel_3: u_bt_sel_3 { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&bt BT_SEL 3>, <&u_macro_u_bt_sel_3>; mods = <(MOD_LSFT|MOD_RSFT)>; }; }; };

/* - used in combos - */

// tap: left/right parenthesis -()- | shft + tap: less-than/greater-than -<>-
SIMPLE_MORPH(lpar_lt, SFT, &kp LPAR, &kp LT)
SIMPLE_MORPH(rpar_gt, SFT, &kp RPAR, &kp GT)

// tap: left/right bracket -[]- | shft + tap: left/right curly -{}-
SIMPLE_MORPH(lbra_cur, SFT, &kp LBKT, &kp LBRC)
SIMPLE_MORPH(rbra_cur, SFT, &kp RBKT, &kp RBRC)

/* Keymap */

/ {
  keymap {
		compatible = "zmk,keymap";

		base_layer {
			bindings = <
                   &hml CAPS Q    &kp W           &kp F           &kp P           &kp B           &kp J           &kp L           &kp U           &kp Y           &hmr CAPS SQT
                   &hml LGUI A    &hml LALT R     &hml LCTRL S    &hml LSHFT T    &kp G           &kp M           &hmr LSHFT N    &hmr LCTRL E    &hmr LALT I     &hmr LGUI O
                   &kp Z          &kp X           &kp C           &lt MM D        &kp V           &kp K           &kp H           &comma_morph    &dot_morph      &slash_morph
				           /* &           & */            &kp BSPC        &kp LSHFT       SMART_NUM       &lt NAV RET     &lt UML SPACE   &lt FN DEL      /* &           & */
			>;
		};

    nav_layer {
      bindings = <
                   &trans         &trans          &trans          &trans          &trans          &kp LC(LEFT)    &kp PG_DN       &kp PG_UP       &kp LC(RIGHT)   &trans
                   &trans         &trans          &trans          &trans          &trans          &kp LEFT        &kp DOWN        &kp UP          &kp RIGHT       &kp K_CANCEL
                   &trans         &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans
				           /* &           & */            &trans          &trans          &trans          &trans          &trans          &trans          /* &            & */
			>;
    };

    fn_and_media_layer {
      bindings = <
                   &trans         &kp C_MUTE      &kp C_STOP      &kp C_PP        &trans          &kp F12         &kp F7          &kp F8          &kp F9          &trans
                   &kp C_BRI_DN   &kp C_VOL_DN    &kp C_VOL_UP    &kp C_BRI_UP    &trans          &kp F11         &kp F4          &kp F5          &kp F6          &trans
                   &u_bt_sel_0    &u_bt_sel_1     &u_bt_sel_2     &u_bt_sel_3     &trans          &kp F10         &kp F1          &kp F2          &kp F3          &trans
				           /* &           & */            &kp K_APP       &trans          &trans          &trans          &trans          &trans          /* &            & */
			>;
    };

		num_layer {
      bindings = <
                   &kp LA(T)      &kp LG(N7)      &kp LG(N8)      &kp LG(N9)      &trans          &trans          &kp N7          &kp N8          &kp N9          &trans
                   &kp LG(N0)     &kp LG(N4)      &kp LG(N5)      &kp LG(N6)      &trans          &trans          &hmr LALT N4    &hmr LCTRL N5   &hmr LSHFT N6   &hmr LGUI N0
                   &trans         &kp LG(N1)      &kp LG(N2)      &kp LG(N3)      &trans          &trans          &kp N1          &kp N2          &kp N3          &trans
				           /* &           & */            &trans          &trans          &trans          &trans          &trans          &trans          /* &            & */
			>;
		};

    umlaut_layer {
			bindings = <
                   &trans         &trans          &trans          &trans          &trans          &trans          &trans          &kp LA(U)       &trans          &trans
                   &kp LA(A)      &trans          &kp LA(S)       &trans          &trans          &trans          &trans          &kp LA(E)       &trans          &kp LA(O)
                   &trans         &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans
				           /* &           & */            &trans          &trans          &trans          &trans          &trans          &trans          /* &            & */
			>;
	  };

		mouse_layer {
			bindings = <
                   &trans         &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans
                   &trans         &trans          &trans          &trans          &trans          &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP    &mmv MOVE_RIGHT &trans
                   &trans         &trans          &trans          &trans          &trans          &trans          &msc SCRL_DOWN  &msc SCRL_UP    &trans          &trans
				           /* &           & */            &trans          &trans          &trans          &mkp LCLK       &mkp RCLK       &trans          /* &            & */
			>;
	  };
	};
};
